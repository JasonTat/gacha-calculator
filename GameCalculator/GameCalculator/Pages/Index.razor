@page "/"
@using GameCalculatorLibrary.BLL
@using GameCalculatorLibrary.Models
@using GameCalculatorLibrary.Entities

@inject GameServices _services

<PageTitle>@currentGameName</PageTitle>

<div class="">

    <div class="">
        <div class="card-title">
            <h2>@currentGameName</h2>
        </div>
    </div>


    <div class="">

        <div class="row">
            <div class="col">
                <select class="form-select" @bind="currentGameId" @onclick="() => UpdateCurrentGame()">
                    <option selected value="0">Select a Game...</option>
                    @foreach (var game in gameList)
                    {
                    <option value="@game.ID">@game.GameName</option>
                    }
                </select>
            </div>
        </div>

        <div class="row mt-2 g-3">
            <div class="col">
                <input type="text" class="form-control" @bind="currentEnergyAmount" placeholder="Current Energy Amount" />
            </div>
        </div>

        <div class="mt-3">
            <button @onclick="() => CalculateTimeToReplenish(currentEnergyAmount)">Calculate</button>
        </div>

        @if (HasError)
        {
            <p>@errorMessage</p>
        }

        <div>
            @if (timeSpan != zeroTimeSpan && futureTime != timeThatItDefaultsToWithoutAValue)
            {
                //if equal to full
                @if (isEnergyFull)
                {
                    <p>Your energy is full.</p>
                }
                //if not equal to full
                else
                {
                    <p>@timeSpan.Hours hours and @timeSpan.Minutes minutes to full replenish.</p>
                    <p>@futureTime</p>
                }
            }
        </div>

    </div>
    
</div>


@* <div>
    <h3>test add</h3>
    <div>
        <label>game name</label>
        <input type="text" @bind="@newGameToAdd.GameName"/>
    </div>
    <div>
        <label>minute per energy</label>
        <input type="number" @bind="@newGameToAdd.MinutesPerEnergy" />
    </div>
    <div>
        <label>max energy</label>
        <input type="number" @bind="@newGameToAdd.MaximumEnergyCap"/>
    </div>

    <button @onclick="() => OnClickAddGame(newGameToAdd)">Add Game</button>

    @if (successfullyAdded)
    {
        <p>added!</p>
    }

</div> *@


@code {
    #region variables


    //starting variables
    public List<Game> gameList = new List<Game>();
    public Game currentGame = new();        
    public int currentGameId;

    //we change currentGameName to the currentGame.GameName value
    public string currentGameName = "Gacha Game Energy Calculator";

    //user input variables
    string currentEnergyAmount;
    bool isEnergyFull = false;

    //output variables
    int minutesToFullReplenish;
    DateTime futureTime;
    TimeSpan timeSpan;

    //these are the values that the system defaults to, will compare output value to this and show return value if it does not equal this.
    DateTime timeThatItDefaultsToWithoutAValue;
    TimeSpan zeroTimeSpan;

    public string errorMessage { get; set; }
    List<Exception> errorList = new List<Exception>();
    public bool HasError => !string.IsNullOrWhiteSpace(errorMessage);

    #endregion

    #region admin create variables

    public GameClass newGameToAdd = new GameClass();
    bool successfullyAdded = false;

    #endregion

    protected override void OnInitialized()
    {   
        gameList = _services.PopulateGameList();
    }

    private Game UpdateCurrentGame()
    {
        try
        {
            currentGame = _services.FetchGameFromId(currentGameId);

            //update h1 title and pagetitle to current game name based on game selection
            if (currentGame is not null)
            {
                currentGameName = currentGame.GameName;
                return currentGame;
            }
            return null;
        }
        catch(Exception ex)
        {
            throw new Exception("Unable to get that game. Please try again.");
        }
    }

    private void CalculateTimeToReplenish(string currentEnergyAmount)
    {
        try
        {
            //reset the error bool so it doesn't show the error msg on a new attempt
            errorMessage = "";

            string currentEnergyToString;
            int currentEnergyToInt = Int32.Parse(currentEnergyAmount);

            if(currentEnergyToInt == currentGame.MaximumEnergyCap)
            {
                isEnergyFull = true;
            }
            else
            {
                isEnergyFull = false;
                minutesToFullReplenish = _services.GameEnergyCalculator(currentEnergyToInt, currentGame);
                timeSpan = TimeSpan.FromMinutes(minutesToFullReplenish);
                futureTime = DateTime.Now.Add(timeSpan);
            }
        }
        catch (Exception ex)
        {
            errorMessage = GetInnerException(ex).Message;
        }
    }

    private void OnClickAddGame(GameClass game)
    {
        try
        {
            _services.AddGame(game);    
            successfullyAdded = true;
        }
        catch (AggregateException ex)       
        {
            foreach(var error in ex.InnerExceptions)
            {
                errorList.Add(error);
            }
        }
        catch(Exception ex)
        {
            errorMessage = GetInnerException(ex).Message;

        }

    }
    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
        {
            ex = ex.InnerException;
        }
        return ex;
    }

}